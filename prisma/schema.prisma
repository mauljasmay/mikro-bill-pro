// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  phone           String?
  password        String
  role            UserRole @default(CUSTOMER)
  status          UserStatus @default(ACTIVE)
  mikrotikId      String?  // Mikrotik user ID for PPPoE/Hotspot
  balance         Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  subscriptions   Subscription[]
  transactions    Transaction[]
  sessions        InternetSession[]
  
  @@map("users")
}

model Package {
  id              String       @id @default(cuid())
  name            String
  description     String?
  type            PackageType
  price           Float
  duration        Int          // Duration in days
  dataLimit       Int?         // Data limit in MB, null for unlimited
  speedLimit      String?      // Speed limit like "10Mbps/10Mbps"
  mikrotikProfile String?      // Mikrotik profile name
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  subscriptions   Subscription[]
  
  @@map("packages")
}

model Subscription {
  id              String           @id @default(cuid())
  userId          String
  packageId       String
  status          SubscriptionStatus @default(ACTIVE)
  startDate       DateTime         @default(now())
  endDate         DateTime
  lastRenewal     DateTime?
  autoRenew       Boolean          @default(false)
  mikrotikName    String?          // Mikrotik username/identifier
  mikrotikPassword String?         // Mikrotik password
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  package         Package          @relation(fields: [packageId], references: [id])
  transactions    Transaction[]
  
  @@map("subscriptions")
}

model Transaction {
  id              String           @id @default(cuid())
  userId          String
  subscriptionId  String?
  type            TransactionType
  amount          Float
  status          TransactionStatus @default(PENDING)
  paymentMethod   String?
  paymentChannel  String?
  externalId      String?          // Xendit payment ID
  description     String?
  metadata        String?          // JSON string for additional data
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription?    @relation(fields: [subscriptionId], references: [id])
  
  @@map("transactions")
}

model InternetSession {
  id              String   @id @default(cuid())
  userId          String
  sessionId       String   // Mikrotik session ID
  startTime       DateTime
  endTime         DateTime?
  uploadBytes     BigInt   @default(0)
  downloadBytes   BigInt   @default(0)
  ipAddress       String?
  macAddress      String?
  mikrotikUser    String?  // Mikrotik username
  status          SessionStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("internet_sessions")
}

model MikrotikConfig {
  id              String   @id @default(cuid())
  name            String   @unique
  host            String
  port            Int      @default(8728)
  username        String
  password        String
  useSSL          Boolean  @default(false)
  isActive        Boolean  @default(true)
  lastSync        DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("mikrotik_configs")
}

model SystemSettings {
  id              String   @id @default(cuid())
  key             String   @unique
  value           String
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("system_settings")
}

// Enums
enum UserRole {
  ADMIN
  CUSTOMER
  SUPPORT
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  TERMINATED
}

enum PackageType {
  PPPOE
  HOTSPOT
  BOTH
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

enum TransactionType {
  SUBSCRIPTION
  RENEWAL
  TOPUP
  REFUND
  PENALTY
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  TERMINATED
  TIMEOUT
}